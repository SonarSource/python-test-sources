[case testSelfTypeInstance]
from typing import TypeVar

T = TypeVar('T', bound='A', covariant=True)

class A:
    def copy(self: T) -> T: pass

class B(A):
    pass

reveal_type(A().copy)  # N: Revealed type is 'def () -> __main__.A*'
reveal_type(B().copy)  # N: Revealed type is 'def () -> __main__.B*'
reveal_type(A().copy())  # N: Revealed type is '__main__.A*'
reveal_type(B().copy())  # N: Revealed type is '__main__.B*'

[builtins fixtures/bool.pyi]

[case testSelfTypeStaticAccess]
from typing import TypeVar

T = TypeVar('T', bound='A', covariant=True)
class A:
    def copy(self: T) -> T: pass

class B(A):
    pass

# Erased instances appear on reveal_type; unrelated to self type
def f(a: A) -> None: pass
f(A.copy(A()))
f(A.copy(B()))
f(B.copy(B()))

# TODO: make it an error
# f(B.copy(A()))

def g(a: B) -> None: pass
g(A.copy(A()))  # E: Argument 1 to "g" has incompatible type "A"; expected "B"
g(A.copy(B()))
g(B.copy(B()))

[builtins fixtures/bool.pyi]

[case testSelfTypeReturn]
from typing import TypeVar, Type

R = TypeVar('R')
def _type(self: R) -> Type[R]: pass

T = TypeVar('T', bound='A', covariant=True)
class A:
    def copy(self: T) -> T:
        if B():
            return A()  # E: Incompatible return value type (got "A", expected "T")
        elif A():
            return B()  # E: Incompatible return value type (got "B", expected "T")
        reveal_type(_type(self))  # N: Revealed type is 'Type[T`-1]'
        return reveal_type(_type(self)())  # N: Revealed type is 'T`-1'

class B(A):
    pass

Q = TypeVar('Q', bound='C', covariant=True)
class C:
    def __init__(self, a: int) -> None: pass

    def copy(self: Q) -> Q:
        if self:
            return reveal_type(_type(self)(1))  # N: Revealed type is 'Q`-1'
        else:
            return _type(self)()  # E: Too few arguments for "C"


[builtins fixtures/bool.pyi]

[case testSelfTypeClass]
from typing import TypeVar, Type

T = TypeVar('T', bound='A')

class A:
    @classmethod
    def new(cls: Type[T]) -> T:
        return reveal_type(cls())  # N: Revealed type is 'T`-1'

class B(A):
    pass

Q = TypeVar('Q', bound='C', covariant=True)
class C:
    def __init__(self, a: int) -> None: pass

    @classmethod
    def new(cls: Type[Q]) -> Q:
        if cls:
            return cls(1)
        else:
            return cls()  # E: Too few arguments for "C"


reveal_type(A.new)  # N: Revealed type is 'def () -> __main__.A*'
reveal_type(B.new)  # N: Revealed type is 'def () -> __main__.B*'
reveal_type(A.new())  # N: Revealed type is '__main__.A*'
reveal_type(B.new())  # N: Revealed type is '__main__.B*'

[builtins fixtures/classmethod.pyi]

[case testSelfTypeOverride]
from typing import TypeVar, cast

T = TypeVar('T', bound='A', covariant=True)

class A:
    def copy(self: T) -> T: pass

class B(A):
    pass

Q = TypeVar('Q', bound='C', covariant=True)
class C(A):
    def copy(self: Q) -> Q: pass

reveal_type(C().copy)  # N: Revealed type is 'def () -> __main__.C*'
reveal_type(C().copy())  # N: Revealed type is '__main__.C*'
reveal_type(cast(A, C()).copy)  # N: Revealed type is 'def () -> __main__.A*'
reveal_type(cast(A, C()).copy())  # N: Revealed type is '__main__.A*'

[builtins fixtures/bool.pyi]

[case testSelfTypeSuper]
from typing import TypeVar, cast

T = TypeVar('T', bound='A', covariant=True)

class A:
    def copy(self: T) -> T: pass

Q = TypeVar('Q', bound='B', covariant=True)
class B(A):
    def copy(self: Q) -> Q:
        reveal_type(self)  # N: Revealed type is 'Q`-1'
        reveal_type(super().copy)  # N: Revealed type is 'def () -> Q`-1'
        return super().copy()

[builtins fixtures/bool.pyi]

[case testSelfTypeRecursiveBinding]
from typing import TypeVar, Callable, Type

T = TypeVar('T', bound='A', covariant=True)
class A:
    # TODO: This is potentially unsafe, as we use T in an argument type
    def copy(self: T, factory: Callable[[T], T]) -> T:
        return factory(self)

    @classmethod
    def new(cls: Type[T], factory: Callable[[T], T]) -> T:
        reveal_type(cls)   # N: Revealed type is 'Type[T`-1]'
        reveal_type(cls())   # N: Revealed type is 'T`-1'
        cls(2)  # E: Too many arguments for "A"
        return cls()

class B(A):
    pass

reveal_type(A().copy)  # N: Revealed type is 'def (factory: def (__main__.A*) -> __main__.A*) -> __main__.A*'
reveal_type(B().copy)  # N: Revealed type is 'def (factory: def (__main__.B*) -> __main__.B*) -> __main__.B*'
reveal_type(A.new)  # N: Revealed type is 'def (factory: def (__main__.A*) -> __main__.A*) -> __main__.A*'
reveal_type(B.new)  # N: Revealed type is 'def (factory: def (__main__.B*) -> __main__.B*) -> __main__.B*'

[builtins fixtures/classmethod.pyi]

[case testSelfTypeBound]
from typing import TypeVar, Callable, cast

TA = TypeVar('TA', bound='A', covariant=True)

class A:
    def copy(self: TA) -> TA:
        pass

class C(A):
    def copy(self: C) -> C:
        pass

class D(A):
   def copy(self: A) -> A:  # E: Return type "A" of "copy" incompatible with return type "D" in supertype "A"
       pass

TB = TypeVar('TB', bound='B', covariant=True)
class B(A):
    x = 1
    def copy(self: TB) -> TB:
        reveal_type(self.x)  # N: Revealed type is 'builtins.int'
        return cast(TB, None)

[builtins fixtures/bool.pyi]

-- # TODO: fail for this
-- [case testSelfTypeBare]
-- from typing import TypeVar, Type
--
-- T = TypeVar('T', bound='E')
--
-- class E:
--     def copy(self: T, other: T) -> T: pass

[case testSelfTypeClone]
from typing import TypeVar, Type
T = TypeVar('T', bound='C')

class C:
    def copy(self: T) -> T:
        return self

    @classmethod
    def new(cls: Type[T]) -> T:
        return cls()

class D(C): pass

reveal_type(D.new)  # N: Revealed type is 'def () -> __main__.D*'
reveal_type(D().new)  # N: Revealed type is 'def () -> __main__.D*'
reveal_type(D.new())  # N: Revealed type is '__main__.D*'
reveal_type(D().new())  # N: Revealed type is '__main__.D*'

Q = TypeVar('Q', bound=C)

def clone(arg: Q) -> Q:
    reveal_type(arg.copy)  # N: Revealed type is 'def () -> Q`-1'
    reveal_type(arg.copy())  # N: Revealed type is 'Q`-1'
    reveal_type(arg.new)  # N: Revealed type is 'def () -> Q`-1'
    reveal_type(arg.new())  # N: Revealed type is 'Q`-1'
    return arg.copy()

def make(cls: Type[Q]) -> Q:
    reveal_type(cls.new)  # N: Revealed type is 'def () -> Q`-1'
    reveal_type(cls().new)  # N: Revealed type is 'def () -> Q`-1'
    reveal_type(cls().new())  # N: Revealed type is 'Q`-1'
    return cls.new()

[builtins fixtures/classmethod.pyi]

[case testSelfTypeGeneric]
from typing import TypeVar

T = TypeVar('T', int, str)

class A:
    pass

class B(A):
    def __init__(self, arg: T) -> None:
        super(B, self).__init__()

[case testSelfTypeNonsensical]
from typing import TypeVar, Type

T = TypeVar('T', bound=str)
class A:
    def foo(self: T) -> T:   # E: The erased type of self "builtins.str" is not a supertype of its class "__main__.A"
        return self

    @classmethod
    def cfoo(cls: Type[T]) -> T:  # E: The erased type of self "Type[builtins.str]" is not a supertype of its class "Type[__main__.A]"
        return cls()

Q = TypeVar('Q', bound='B')
class B:
    def foo(self: Q) -> Q:
        return self

    @classmethod
    def cfoo(cls: Type[Q]) -> Q:
        return cls()

class C:
    def foo(self: C) -> C: return self

    @classmethod
    def cfoo(cls: Type[C]) -> C:
        return cls()

class D:
    def foo(self: Q) -> Q:  # E: The erased type of self "__main__.B" is not a supertype of its class "__main__.D"
        return self

    @staticmethod
    def bar(self: str) -> str:
        return self

    @classmethod
    def cfoo(cls: Type[Q]) -> Q:  # E: The erased type of self "Type[__main__.B]" is not a supertype of its class "Type[__main__.D]"
        return cls()

[builtins fixtures/classmethod.pyi]

[case testSelfTypeLambdaDefault]
from typing import Callable
class C:
    @classmethod
    def foo(cls,
            arg: Callable[[int], str] = lambda a: ''
            ) -> None:
        pass

    def bar(self,
            arg: Callable[[int], str] = lambda a: ''
            ) -> None:
        pass
[builtins fixtures/classmethod.pyi]

[case testSelfTypeNew]
from typing import TypeVar, Type

T = TypeVar('T', bound=A)
class A:
    def __new__(cls: Type[T]) -> T:
        return cls()

    def __init_subclass__(cls: Type[T]) -> None:
        pass

class B:
    def __new__(cls: Type[T]) -> T:  # E: The erased type of self "Type[__main__.A]" is not a supertype of its class "Type[__main__.B]"
        return cls()

    def __init_subclass__(cls: Type[T]) -> None:  # E: The erased type of self "Type[__main__.A]" is not a supertype of its class "Type[__main__.B]"
        pass

class C:
    def __new__(cls: Type[C]) -> C:
        return cls()

    def __init_subclass__(cls: Type[C]) -> None:
        pass

class D:
    def __new__(cls: D) -> D:  # E: The erased type of self "__main__.D" is not a supertype of its class "Type[__main__.D]"
        return cls

    def __init_subclass__(cls: D) -> None:  # E: The erased type of self "__main__.D" is not a supertype of its class "Type[__main__.D]"
        pass

class E:
    def __new__(cls) -> E:
        reveal_type(cls)  # N: Revealed type is 'Type[__main__.E]'
        return cls()

    def __init_subclass__(cls) -> None:
        reveal_type(cls)  # N: Revealed type is 'Type[__main__.E]'

[case testSelfTypePropertyUnion]
from typing import Union
class A:
    @property
    def f(self: A) -> int: pass

class B:
    @property
    def f(self: B) -> int: pass
x: Union[A, B]
reveal_type(x.f)  # N: Revealed type is 'builtins.int'

[builtins fixtures/property.pyi]

[case testSelfTypeProperSupertypeAttribute]
from typing import Callable, TypeVar
class K: pass
T = TypeVar('T', bound=K)
class A(K):
    @property
    def g(self: K) -> int: return 0
    @property
    def gt(self: T) -> T: return self
    f: Callable[[object], int]
    ft: Callable[[T], T]

class B(A):
    pass

reveal_type(A().g)  # N: Revealed type is 'builtins.int'
reveal_type(A().gt)  # N: Revealed type is '__main__.A*'
reveal_type(A().f())  # N: Revealed type is 'builtins.int'
reveal_type(A().ft())  # N: Revealed type is '__main__.A*'
reveal_type(B().g)  # N: Revealed type is 'builtins.int'
reveal_type(B().gt)  # N: Revealed type is '__main__.B*'
reveal_type(B().f())  # N: Revealed type is 'builtins.int'
reveal_type(B().ft())  # N: Revealed type is '__main__.B*'

[builtins fixtures/property.pyi]

[case testSelfTypeProperSupertypeAttributeTuple]
from typing import Callable, TypeVar, Tuple
T = TypeVar('T')
class A(Tuple[int, int]):
    @property
    def g(self: object) -> int: return 0
    @property
    def gt(self: T) -> T: return self
    f: Callable[[object], int]
    ft: Callable[[T], T]

class B(A):
    pass

reveal_type(A().g)  # N: Revealed type is 'builtins.int'
reveal_type(A().gt)  # N: Revealed type is 'Tuple[builtins.int, builtins.int, fallback=__main__.A]'
reveal_type(A().f())  # N: Revealed type is 'builtins.int'
reveal_type(A().ft())  # N: Revealed type is 'Tuple[builtins.int, builtins.int, fallback=__main__.A]'
reveal_type(B().g)  # N: Revealed type is 'builtins.int'
reveal_type(B().gt)  # N: Revealed type is 'Tuple[builtins.int, builtins.int, fallback=__main__.B]'
reveal_type(B().f())  # N: Revealed type is 'builtins.int'
reveal_type(B().ft())  # N: Revealed type is 'Tuple[builtins.int, builtins.int, fallback=__main__.B]'

[builtins fixtures/property.pyi]

[case testSelfTypeProperSupertypeAttributeMeta]
from typing import Callable, TypeVar, Type
T = TypeVar('T')
class A(type):
    @property
    def g(cls: object) -> int: return 0
    @property
    def gt(cls: T) -> T: return cls
    f: Callable[[object], int]
    ft: Callable[[T], T]

class B(A):
    pass

class X(metaclass=B):
    def __init__(self, x: int) -> None: pass
class Y(X): pass
X1: Type[X]
reveal_type(X.g)  # N: Revealed type is 'builtins.int'
reveal_type(X.gt)  # N: Revealed type is 'def (x: builtins.int) -> __main__.X'
reveal_type(X.f())  # N: Revealed type is 'builtins.int'
reveal_type(X.ft())  # N: Revealed type is 'def (x: builtins.int) -> __main__.X'
reveal_type(Y.g)  # N: Revealed type is 'builtins.int'
reveal_type(Y.gt)  # N: Revealed type is 'def (x: builtins.int) -> __main__.Y'
reveal_type(Y.f())  # N: Revealed type is 'builtins.int'
reveal_type(Y.ft())  # N: Revealed type is 'def (x: builtins.int) -> __main__.Y'
reveal_type(X1.g)  # N: Revealed type is 'builtins.int'
reveal_type(X1.gt)  # N: Revealed type is 'Type[__main__.X]'
reveal_type(X1.f())  # N: Revealed type is 'builtins.int'
reveal_type(X1.ft())  # N: Revealed type is 'Type[__main__.X]'

[builtins fixtures/property.pyi]

[case testSelfTypeProperSupertypeAttributeGeneric]
from typing import Callable, TypeVar, Generic
Q = TypeVar('Q', covariant=True)
class K(Generic[Q]):
    q: Q
T = TypeVar('T')
class A(K[Q]):
    @property
    def g(self: K[object]) -> int: return 0
    @property
    def gt(self: K[T]) -> T: return self.q
    f: Callable[[object], int]
    ft: Callable[[T], T]

class B(A[Q]):
    pass
a: A[int]
b: B[str]
reveal_type(a.g)  # N: Revealed type is 'builtins.int'
reveal_type(a.gt)  # N: Revealed type is 'builtins.int'
reveal_type(a.f())  # N: Revealed type is 'builtins.int'
reveal_type(a.ft())  # N: Revealed type is '__main__.A[builtins.int]'
reveal_type(b.g)  # N: Revealed type is 'builtins.int'
reveal_type(b.gt)  # N: Revealed type is 'builtins.str'
reveal_type(b.f())  # N: Revealed type is 'builtins.int'
reveal_type(b.ft())  # N: Revealed type is '__main__.B[builtins.str]'
[builtins fixtures/property.pyi]

[case testSelfTypeRestrictedMethod]
from typing import TypeVar, Generic

T = TypeVar('T')
class C(Generic[T]):
    def from_item(self: C[str]) -> None: ...

i: C[int]
s: C[str]

i.from_item()  # E: Invalid self argument "C[int]" to attribute function "from_item" with type "Callable[[C[str]], None]"
s.from_item()

[case testSelfTypeRestrictedClassMethod]
from typing import TypeVar, Generic, Type

T = TypeVar('T')
class C(Generic[T]):
    @classmethod
    def from_item(cls: Type[C[str]]) -> None: ...

class DI(C[int]): ...
class DS(C[str]): ...

DI().from_item()  # E: Invalid self argument "Type[DI]" to class attribute function "from_item" with type "Callable[[Type[C[str]]], None]"
DS().from_item()
DI.from_item()  # E: Invalid self argument "Type[DI]" to attribute function "from_item" with type "Callable[[Type[C[str]]], None]"
DS.from_item()
[builtins fixtures/classmethod.pyi]

[case testSelfTypeRestrictedMethodOverload]
from typing import TypeVar, Generic, overload, Tuple

T = TypeVar('T')
class C(Generic[T]):
    @overload
    def from_item(self: C[str], item: str) -> None: ...
    @overload
    def from_item(self: C[int], item: Tuple[int]) -> None: ...
    def from_item(self, item):
        ...

ci: C[int]
cs: C[str]
reveal_type(ci.from_item)  # N: Revealed type is 'def (item: Tuple[builtins.int])'
reveal_type(cs.from_item)  # N: Revealed type is 'def (item: builtins.str)'
[builtins fixtures/tuple.pyi]

[case testSelfTypeRestrictedMethodOverloadFallback]
from typing import TypeVar, Generic, overload, Callable

T = TypeVar('T')
class C(Generic[T]):
    @overload
    def from_item(self: C[str]) -> str: ...
    @overload
    def from_item(self, converter: Callable[[T], str]) -> str: ...
    def from_item(self, converter):
        ...

ci: C[int]
cs: C[str]
reveal_type(cs.from_item())  # N: Revealed type is 'builtins.str'
ci.from_item()  # E: Too few arguments for "from_item" of "C"

def conv(x: int) -> str: ...
def bad(x: str) -> str: ...
reveal_type(ci.from_item(conv))  # N: Revealed type is 'builtins.str'
ci.from_item(bad)  # E: Argument 1 to "from_item" of "C" has incompatible type "Callable[[str], str]"; expected "Callable[[int], str]"

[case testSelfTypeRestrictedMethodOverloadInit]
from typing import TypeVar
from lib import P, C

reveal_type(P)  # N: Revealed type is 'Overload(def [T] (use_str: Literal[True]) -> lib.P[builtins.str], def [T] (use_str: Literal[False]) -> lib.P[builtins.int])'
reveal_type(P(use_str=True))  # N: Revealed type is 'lib.P[builtins.str]'
reveal_type(P(use_str=False))  # N: Revealed type is 'lib.P[builtins.int]'

reveal_type(C)  # N: Revealed type is 'Overload(def [T] (item: T`1, use_tuple: Literal[False]) -> lib.C[T`1], def [T] (item: T`1, use_tuple: Literal[True]) -> lib.C[builtins.tuple[T`1]])'
reveal_type(C(0, use_tuple=False))  # N: Revealed type is 'lib.C[builtins.int*]'
reveal_type(C(0, use_tuple=True))  # N: Revealed type is 'lib.C[builtins.tuple[builtins.int*]]'

T = TypeVar('T')
class SubP(P[T]):
    pass

SubP('no')  # E: No overload variant of "SubP" matches argument type "str" \
            # N: Possible overload variants: \
            # N:     def [T] __init__(self, use_str: Literal[True]) -> SubP[T] \
            # N:     def [T] __init__(self, use_str: Literal[False]) -> SubP[T]

# This is a bit unfortunate: we don't have a way to map the overloaded __init__ to subtype.
x = SubP(use_str=True)  # E: Need type annotation for 'x'
reveal_type(x)  # N: Revealed type is '__main__.SubP[Any]'
y: SubP[str] = SubP(use_str=True)

[file lib.pyi]
from typing import TypeVar, Generic, overload, Tuple
from typing_extensions import Literal

T = TypeVar('T')
class P(Generic[T]):
    @overload
    def __init__(self: P[str], use_str: Literal[True]) -> None: ...
    @overload
    def __init__(self: P[int], use_str: Literal[False]) -> None: ...

class C(Generic[T]):
    @overload
    def __init__(self: C[T], item: T, use_tuple: Literal[False]) -> None: ...
    @overload
    def __init__(self: C[Tuple[T, ...]], item: T, use_tuple: Literal[True]) -> None: ...
[builtins fixtures/bool.pyi]

[case testSelfTypeRestrictedMethodOverloadInitFallBacks]
from lib import PFallBack, PFallBackAny

t: bool
xx = PFallBack(t)  # E: Need type annotation for 'xx'
yy = PFallBackAny(t)  # OK

[file lib.pyi]
from typing import TypeVar, Generic, overload, Tuple, Any
from typing_extensions import Literal

class PFallBack(Generic[T]):
    @overload
    def __init__(self: PFallBack[str], use_str: Literal[True]) -> None: ...
    @overload
    def __init__(self: PFallBack[int], use_str: Literal[False]) -> None: ...
    @overload
    def __init__(self, use_str: bool) -> None: ...

class PFallBackAny(Generic[T]):
    @overload
    def __init__(self: PFallBackAny[str], use_str: Literal[True]) -> None: ...
    @overload
    def __init__(self: PFallBackAny[int], use_str: Literal[False]) -> None: ...
    @overload
    def __init__(self: PFallBackAny[Any], use_str: bool) -> None: ...
[builtins fixtures/bool.pyi]

[case testSelfTypeRestrictedMethodOverloadInitBadTypeNoCrash]
from lib import P
P(0)
[file lib.pyi]
from typing import overload

class P:
    @overload
    def __init__(self: Bad, x: int) -> None: ...  # E: Name 'Bad' is not defined
    @overload
    def __init__(self) -> None: ...

[case testSelfTypeNarrowBinding]
from typing import TypeVar, List, Generic

T = TypeVar('T')
S = TypeVar('S')

class Base(Generic[T]):
    def get_item(self: Base[List[S]]) -> S: ...

class Sub(Base[List[int]]): ...
class BadSub(Base[int]): ...

reveal_type(Sub().get_item())  # N: Revealed type is 'builtins.int'
BadSub().get_item()  # E: Invalid self argument "BadSub" to attribute function "get_item" with type "Callable[[Base[List[S]]], S]"
[builtins fixtures/list.pyi]

[case testMixinAllowedWithProtocol]
from typing import TypeVar
from typing_extensions import Protocol

class Resource(Protocol):
    def close(self) -> int: ...

class AtomicClose:
    def atomic_close(self: Resource) -> int:
        return self.close()

T = TypeVar('T', bound=Resource)
class Copyable:
    def copy(self: T) -> T: ...

class File(AtomicClose, Copyable):
    def close(self) -> int:
       ...

class Bad(AtomicClose, Copyable):
    ...

f: File
b: Bad
f.atomic_close()  # OK
b.atomic_close()  # E: Invalid self argument "Bad" to attribute function "atomic_close" with type "Callable[[Resource], int]"

reveal_type(f.copy())  # N: Revealed type is '__main__.File*'
b.copy()  # E: Invalid self argument "Bad" to attribute function "copy" with type "Callable[[T], T]"
[builtins fixtures/tuple.pyi]

[case testBadClassLevelDecoratorHack]
from typing_extensions import Protocol
from typing import TypeVar, Any

class FuncLike(Protocol):
    __call__: Any
F = TypeVar('F', bound=FuncLike)

class Test:
    def _deco(func: F) -> F: ...

    @_deco
    def meth(self, x: str) -> int: ...

reveal_type(Test().meth)  # N: Revealed type is 'def (x: builtins.str) -> builtins.int'
Test()._deco  # E: Invalid self argument "Test" to attribute function "_deco" with type "Callable[[F], F]"
[builtins fixtures/tuple.pyi]

[case testSelfTypeTrickyExample]
from typing import *

In = TypeVar('In')
Out = TypeVar('Out')
Mid = TypeVar('Mid')
NewOut = TypeVar('NewOut')

class Lnk(Generic[In, Out]):
    def test(self: Lnk[In, Mid], other: Lnk[Mid, NewOut]) -> Lnk[In, NewOut]: ...

class X: pass
class Y: pass
class Z: pass

a: Lnk[X, Y] = Lnk()
b: Lnk[Y, Z] = Lnk()

a.test(b)
b.test(a)  # E: Argument 1 to "test" of "Lnk" has incompatible type "Lnk[X, Y]"; expected "Lnk[Z, Y]"

[case testSelfTypeReallyTrickyExample]
from typing import *

In = TypeVar('In')
Out = TypeVar('Out')
Other = TypeVar('Other')

_1 = TypeVar('_1')
_2 = TypeVar('_2')
__1 = TypeVar('__1')
__2 = TypeVar('__2')

class Lnk(Generic[In, Out]):
    @overload
    def __rshift__(self, other: Lnk[Out, Other]) -> Lnk[In,Other]: ...
    @overload
    def __rshift__(self: Lnk[In, Tuple[_1, _2]],
                   other: Tuple[Lnk[_1, __1], Lnk[_2, __2]]) -> Lnk[In, Tuple[__1, __2]]: ...
    def __rshift__(self: Any, other: Any) -> Any:
        ...

a: Lnk[str, Tuple[str, int]] = Lnk()
b: Lnk[str, int] = Lnk()
c: Lnk[int, float] = Lnk()

d: Lnk[str, float] = b >> c  # OK
e: Lnk[str, Tuple[int, float]] = a >> (b, c)  # OK
f: Lnk[str, Tuple[float, int]] = a >> (c, b) # E: Unsupported operand types for >> ("Lnk[str, Tuple[str, int]]" and "Tuple[Lnk[int, float], Lnk[str, int]]")
[builtins fixtures/tuple.pyi]

[case testSelfTypeMutuallyExclusiveRestrictions]
from typing import Generic, TypeVar

T = TypeVar('T')

class Foo(Generic[T]):
    def f1(self: Foo[str]) -> None:
        self.f2()  # E: Invalid self argument "Foo[str]" to attribute function "f2" with type "Callable[[Foo[int]], None]"
    def f2(self: Foo[int]) -> None:
        self.f1()  # E: Invalid self argument "Foo[int]" to attribute function "f1" with type "Callable[[Foo[str]], None]"

[case testSelfTypeStructureMetaclassMatch]
from typing import TypeVar, Type, Generic, cast

Cls = TypeVar('Cls')
T = TypeVar('T')

class Manager(Generic[Cls]):
    def create(self: Manager[Type[T]]) -> T: ...

class ModelMeta(type):
    @property
    def objects(cls: T) -> Manager[T]: ...

class Model(metaclass=ModelMeta):
    pass

class Dog(Model): ...
class Cat(Model): ...

c: Cat = Dog.objects.create()  # E: Incompatible types in assignment (expression has type "Dog", variable has type "Cat")
d: Dog = Dog.objects.create()
[builtins fixtures/property.pyi]

[case testSelfTypeProtocolMetaclassMatch]
from typing import Type, TypeVar, Protocol

class HasX(Protocol):
    x: int

T = TypeVar('T', bound=HasX)

class Meta(type):
    def do_x(cls: Type[T]) -> T:
        cls.x
        return cls()

class Good(metaclass=Meta):
    x: int
class Bad(metaclass=Meta):
    pass

Good.do_x()
Bad.do_x()  # E: Invalid self argument "Type[Bad]" to attribute function "do_x" with type "Callable[[Type[T]], T]"

[case testSelfTypeNotSelfType]
# Friendlier error messages for common mistakes. See #2950
class A:
    def f(x: int) -> None: ...
    # def g(self: None) -> None: ... see in check-python2.test
[out]
main:3: error: Self argument missing for a non-static method (or an invalid type for self)

[case testUnionPropertyField]
from typing import Union

class A:
    x: int

class B:
    @property
    def x(self) -> int: return 1

class C:
    @property
    def x(self) -> int: return 1

ab: Union[A, B, C]
reveal_type(ab.x)  # N: Revealed type is 'builtins.int'
[builtins fixtures/property.pyi]

[case testSelfTypeNoTypeVars]
from typing import Generic, List, Optional, TypeVar, Any

Q = TypeVar("Q")
T = TypeVar("T", bound=Super[Any])

class Super(Generic[Q]):
    @classmethod
    def meth(cls, arg: List[T]) -> List[T]:
        pass

class Sub(Super[int]): ...

def test(x: List[Sub]) -> None:
    reveal_type(Sub.meth(x))  # N: Revealed type is 'builtins.list[__main__.Sub*]'
[builtins fixtures/isinstancelist.pyi]

[case testSelfTypeNoTypeVarsRestrict]
from typing import Generic, TypeVar

T = TypeVar('T')
S = TypeVar('S')

class C(Generic[T]):
    def limited(self: C[str], arg: S) -> S: ...

reveal_type(C[str]().limited(0))  # N: Revealed type is 'builtins.int*'

[case testSelfTypeMultipleTypeVars]
from typing import Generic, TypeVar, Tuple

T = TypeVar('T')
S = TypeVar('S')
U = TypeVar('U')

class C(Generic[T]):
    def magic(self: C[Tuple[S, U]]) -> Tuple[T, S, U]: ...

reveal_type(C[Tuple[int, str]]().magic())  # N: Revealed type is 'Tuple[Tuple[builtins.int, builtins.str], builtins.int, builtins.str]'
[builtins fixtures/tuple.pyi]

[case testSelfTypeOnUnion]
from typing import TypeVar, Union

T = TypeVar('T')

class A:
    same: int

class C:
    def same(self: T) -> T: ...

x: Union[A, C]
reveal_type(x.same)  # N: Revealed type is 'Union[builtins.int, def () -> __main__.C*]'

[case testSelfTypeOnUnionClassMethod]
from typing import TypeVar, Union, Type

T = TypeVar('T')

class A:
    same: int

class C:
    @classmethod
    def same(cls: Type[T]) -> T: ...

x: Union[A, C]
reveal_type(x.same)  # N: Revealed type is 'Union[builtins.int, def () -> __main__.C*]'
[builtins fixtures/classmethod.pyi]

[case SelfTypeOverloadedClassMethod]
from lib import Base
from typing import overload, Tuple

class Sub(Base):
    @overload
    @classmethod
    def make(cls) -> Sub: ...
    @overload
    @classmethod
    def make(cls, num: int) -> Tuple[Sub, ...]: ...
    @classmethod
    def make(cls, num=1):
        ...

class Other(Base): ...
class Double(Sub): ...

reveal_type(Other.make())  # N: Revealed type is '__main__.Other*'
reveal_type(Other.make(3))  # N: Revealed type is 'builtins.tuple[__main__.Other*]'
reveal_type(Double.make())  # N: Revealed type is '__main__.Sub'
reveal_type(Double.make(3))  # N: Revealed type is 'builtins.tuple[__main__.Sub]'
[file lib.pyi]
from typing import overload, TypeVar, Type, Tuple

T = TypeVar('T', bound=Base)

class Base:
    @overload
    @classmethod
    def make(cls: Type[T]) -> T: ...
    @overload
    @classmethod
    def make(cls: Type[T], num: int) -> Tuple[T, ...]: ...
[builtins fixtures/classmethod.pyi]

[case testSelfTypeClassMethodOnUnion]
from typing import Type, Union, TypeVar

T = TypeVar('T')

class A:
    @classmethod
    def meth(cls: Type[T]) -> T: ...
class B(A): ...
class C(A): ...

t: Type[Union[B, C]]
reveal_type(t.meth)  # N: Revealed type is 'Union[def () -> __main__.B*, def () -> __main__.C*]'
x = t.meth()
reveal_type(x)  # N: Revealed type is 'Union[__main__.B*, __main__.C*]'
[builtins fixtures/classmethod.pyi]

[case testSelfTypeClassMethodOnUnionGeneric]
from typing import Type, Union, TypeVar, Generic

T = TypeVar('T')
S = TypeVar('S')

class A(Generic[T]):
    @classmethod
    def meth(cls: Type[S]) -> S: ...

t: Type[Union[A[int], A[str]]]
x = t.meth()
reveal_type(x)  # N: Revealed type is 'Union[__main__.A[builtins.int], __main__.A[builtins.str]]'
[builtins fixtures/classmethod.pyi]

[case testSelfTypeClassMethodOnUnionList]
from typing import Type, Union, TypeVar, List

T = TypeVar('T')

class A:
    @classmethod
    def meth(cls: Type[T]) -> List[T]: ...
class B(A): ...
class C(A): ...

t: Type[Union[B, C]]
x = t.meth()[0]
reveal_type(x)  # N: Revealed type is 'Union[__main__.B*, __main__.C*]'
[builtins fixtures/isinstancelist.pyi]

[case testSelfTypeClassMethodOverloadedOnInstance]
from typing import Optional, Type, TypeVar, overload, Union

Id = int

A = TypeVar("A", bound=AClass)

class AClass:
    @overload
    @classmethod
    def delete(cls: Type[A], id: Id, id2: Id) -> Optional[int]: ...

    @overload
    @classmethod
    def delete(cls: Type[A], id: A, id2: None = None) -> Optional[int]: ...

    @classmethod
    def delete(cls: Type[A], id: Union[A, Id], id2: Optional[Id] = None) -> Optional[int]:
        ...

def foo(x: Type[AClass]) -> None:
    reveal_type(x.delete)  # N: Revealed type is 'Overload(def (id: builtins.int, id2: builtins.int) -> builtins.int, def (id: __main__.AClass*, id2: None =) -> builtins.int)'
    y = x()
    reveal_type(y.delete)  # N: Revealed type is 'Overload(def (id: builtins.int, id2: builtins.int) -> builtins.int, def (id: __main__.AClass*, id2: None =) -> builtins.int)'
    y.delete(10, 20)
    y.delete(y)

def bar(x: AClass) -> None:
    reveal_type(x.delete)  # N: Revealed type is 'Overload(def (id: builtins.int, id2: builtins.int) -> builtins.int, def (id: __main__.AClass*, id2: None =) -> builtins.int)'
    x.delete(10, 20)
[builtins fixtures/classmethod.pyi]

[case testSelfTypeBadTypeIgnoredInConstructor]
class Base: ...
class Sub(Base):
    def __init__(self: Base) -> None: ...

reveal_type(Sub())  # N: Revealed type is '__main__.Sub'

[case testSelfTypeBadTypeIgnoredInConstructorGeneric]
from typing import Generic, TypeVar

T = TypeVar('T')

class Base(Generic[T]): ...
class Sub(Base[T]):
    def __init__(self: Base[T], item: T) -> None: ...

reveal_type(Sub(42))  # N: Revealed type is '__main__.Sub[builtins.int*]'

[case testSelfTypeBadTypeIgnoredInConstructorOverload]
from typing import overload

class Base: ...
class Sub(Base):
    @overload
    def __init__(self: Sub, item: int) -> None: ...
    @overload
    def __init__(self: Base) -> None: ...
    def __init__(self, item=None):
        ...

reveal_type(Sub)  # N: Revealed type is 'Overload(def (item: builtins.int) -> __main__.Sub, def () -> __main__.Sub)'

[case testSelfTypeBadTypeIgnoredInConstructorAbstract]
from abc import abstractmethod
from typing import Protocol

class Blah(Protocol):
    @abstractmethod
    def something(self) -> None: ...

class Concrete(Blah):
    def __init__(self: Blah) -> None: ...
    def something(self) -> None: ...

Concrete()  # OK

[case testSelfTypeGenericClassNoClashInstanceMethod]
from typing import TypeVar, Generic

M = TypeVar("M")
T = TypeVar("T")
S = TypeVar("S")

class Descriptor(Generic[M]): ...

class BaseWrapper(Generic[M]):
    def create_wrapper(self: T, metric_descriptor: Descriptor[M]) -> T: ...
class SubWrapper(BaseWrapper[M]): ...

def build_wrapper(descriptor: Descriptor[M]) -> BaseWrapper[M]:
    wrapper: BaseWrapper[M]
    return wrapper.create_wrapper(descriptor)

def build_sub_wrapper(descriptor: Descriptor[S]) -> SubWrapper[S]:
    wrapper: SubWrapper[S]
    x = wrapper.create_wrapper(descriptor)
    reveal_type(x)  # N: Revealed type is '__main__.SubWrapper[S`-1]'
    return x

[case testSelfTypeGenericClassNoClashClassMethod]
from typing import TypeVar, Generic, Type

M = TypeVar("M")
T = TypeVar("T")
S = TypeVar("S")

class Descriptor(Generic[M]): ...

class BaseWrapper(Generic[M]):
    @classmethod
    def create_wrapper(cls: Type[T], metric_descriptor: Descriptor[M]) -> T: ...
class SubWrapper(BaseWrapper[M]): ...

def build_wrapper(descriptor: Descriptor[M]) -> BaseWrapper[M]:
    wrapper_cls: Type[BaseWrapper[M]]
    return wrapper_cls.create_wrapper(descriptor)

def build_sub_wrapper(descriptor: Descriptor[S]) -> SubWrapper[S]:
    wrapper_cls: Type[SubWrapper[S]]
    x = wrapper_cls.create_wrapper(descriptor)
    reveal_type(x)  # N: Revealed type is '__main__.SubWrapper[S`-1]'
    return x
[builtins fixtures/classmethod.pyi]

[case testSelfTypeGenericClassNoClashClassMethodClassObject]
from typing import TypeVar, Generic, Type

M = TypeVar("M")
T = TypeVar("T")

class Descriptor(Generic[M]): ...

class BaseWrapper(Generic[M]):
    @classmethod
    def create_wrapper(cls: Type[T], metric_descriptor: Descriptor[M]) -> T: ...
class SubWrapper(BaseWrapper[M]): ...

def build_wrapper(descriptor: Descriptor[M]) -> BaseWrapper[M]:
    return BaseWrapper.create_wrapper(descriptor)

def build_sub_wrapper(descriptor: Descriptor[M]) -> SubWrapper[M]:
    x = SubWrapper.create_wrapper(descriptor)
    reveal_type(x)  # N: Revealed type is '__main__.SubWrapper[M`-1]'
    return x

def build_wrapper_non_gen(descriptor: Descriptor[int]) -> BaseWrapper[str]:
    return BaseWrapper.create_wrapper(descriptor)  # E: Argument 1 to "create_wrapper" of "BaseWrapper" has incompatible type "Descriptor[int]"; expected "Descriptor[str]"

def build_sub_wrapper_non_gen(descriptor: Descriptor[int]) -> SubWrapper[str]:
    return SubWrapper.create_wrapper(descriptor)  # E: Argument 1 to "create_wrapper" of "BaseWrapper" has incompatible type "Descriptor[int]"; expected "Descriptor[str]"
[builtins fixtures/classmethod.pyi]
