parameters:
  name: ''
  vmImage: ''
  matrix: []
  dependsOn: []
  condition: ''

jobs:
- job: ${{ parameters.name }}
  dependsOn: ${{ parameters.dependsOn }}
  condition: ${{ parameters.condition }}
  timeoutInMinutes: 120
  pool:
    vmImage: ${{ parameters.vmImage }}
  variables:
    TEST_DIR: '$(Agent.WorkFolder)/tmp_folder'
    VIRTUALENV: 'testvenv'
    JUNITXML: 'test-data.xml'
    OMP_NUM_THREADS: '2'
    OPENBLAS_NUM_THREADS: '2'
    CPU_COUNT: '2'
    SKLEARN_SKIP_NETWORK_TESTS: '1'
    CCACHE_DIR: $(Pipeline.Workspace)/ccache
    CCACHE_COMPRESS: '1'
    NUMPY_VERSION: 'latest'
    SCIPY_VERSION: 'latest'
    CYTHON_VERSION: 'latest'
    JOBLIB_VERSION: 'latest'
    PANDAS_VERSION: 'latest'
    PYAMG_VERSION: 'latest'
    PILLOW_VERSION: 'latest'
    MATPLOTLIB_VERSION: 'latest'
    PYTEST_VERSION: 'latest'
    # Disable pytest-xdist as it can stall builds
    PYTEST_XDIST_VERSION: 'latest'
    THREADPOOLCTL_VERSION: 'latest'
    COVERAGE: 'true'
    TEST_DOCSTRINGS: 'false'
    CREATE_ISSUE_ON_TRACKER: 'false'
    SHOW_SHORT_SUMMARY: 'false'
  strategy:
    matrix:
      ${{ insert }}: ${{ parameters.matrix }}

  steps:
    - bash: echo "##vso[task.prependpath]$CONDA/bin"
      displayName: Add conda to PATH
      condition: startsWith(variables['DISTRIB'], 'conda')
    - bash: sudo chown -R $USER $CONDA
      displayName: Take ownership of conda installation
      condition: startsWith(variables['DISTRIB'], 'conda')
    - task: Cache@2
      inputs:
        key: '"ccache-v1" | "$(Agent.JobName)" | "$(Build.BuildNumber)"'
        restoreKeys: |
          "ccache-v1" | "$(Agent.JobName)"
        path: $(CCACHE_DIR)
      displayName: ccache
      continueOnError: true
    - script: |
        build_tools/azure/install.sh
      displayName: 'Install'
    - script: |
        build_tools/azure/test_script.sh
      displayName: 'Test Library'
    - script: |
        build_tools/azure/test_docs.sh
      displayName: 'Test Docs'
    - script: |
        build_tools/azure/test_pytest_soft_dependency.sh
      displayName: 'Test Soft Dependency'
      condition: eq(variables['CHECK_PYTEST_SOFT_DEPENDENCY'], 'true')
    - task: PublishTestResults@2
      inputs:
        testResultsFiles: '$(TEST_DIR)/$(JUNITXML)'
        testRunTitle: ${{ format('{0}-$(Agent.JobName)', parameters.name) }}
      displayName: 'Publish Test Results'
      condition: succeededOrFailed()
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.9'
      displayName: Place Python into path to update issue tracker
      condition: and(succeededOrFailed(), eq(variables['CREATE_ISSUE_ON_TRACKER'], 'true'),
                     eq(variables['Build.Reason'], 'Schedule'))
    - bash: |
        set -ex
        if [[ $(BOT_GITHUB_TOKEN) == "" ]]; then
          echo "GitHub Token is not set. Issue tracker will not be updated."
          exit
        fi

        LINK_TO_RUN="https://dev.azure.com/$BUILD_REPOSITORY_NAME/_build/results?buildId=$BUILD_BUILDID&view=logs&j=$SYSTEM_JOBID"
        CI_NAME="$SYSTEM_JOBIDENTIFIER"
        ISSUE_REPO="$BUILD_REPOSITORY_NAME"

        pip install defusedxml PyGithub
        python maint_tools/create_issue_from_juint.py $(BOT_GITHUB_TOKEN) $CI_NAME $ISSUE_REPO $LINK_TO_RUN $JUNIT_FILE
      displayName: 'Update issue tracker'
      env:
        JUNIT_FILE: $(TEST_DIR)/$(JUNITXML)
      condition: and(succeededOrFailed(), eq(variables['CREATE_ISSUE_ON_TRACKER'], 'true'),
                     eq(variables['Build.Reason'], 'Schedule'))
    - script: |
        build_tools/azure/upload_codecov.sh
      condition: and(succeeded(), eq(variables['COVERAGE'], 'true'))
      displayName: 'Upload To Codecov'
      env:
        CODECOV_TOKEN: $(CODECOV_TOKEN)
